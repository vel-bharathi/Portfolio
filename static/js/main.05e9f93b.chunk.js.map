{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","setRange","e","console","log","setState","rangeValue","target","value","isNight","hour","state","time","getHours","isAm","Date","_this2","setInterval","now","leftPosition","getMinutes","react_default","a","createElement","className","classnames","night","day","toLocaleTimeString","moon","sun","style","left","concat","map","type","onChange","step","min","max","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"yOAyEeA,qBAnEb,SAAAA,EAAYC,GAAM,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IAChBE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KAQRQ,SAAW,SAACC,GACVC,QAAQC,IAAIF,GACZR,EAAKW,SAAS,CAACC,WAAYJ,EAAEK,OAAOC,SAXpBd,EAclBe,QAAU,WACR,IAAIC,EAAOhB,EAAKiB,MAAMC,KAAKC,WAE3B,GAAGnB,EAAKiB,MAAML,WAAW,CACvB,IAAIQ,EAAOJ,GAAO,GAAKA,EAAO,GAE9B,OADAP,QAAQC,IAAIU,EAAMpB,EAAKiB,MAAML,eAC1BQ,GAAQpB,EAAKiB,MAAML,YAAa,MAEzBQ,GAASpB,EAAKiB,MAAML,YAAa,GAK7C,OAAQI,EAAO,GAAKA,EAAO,IAzB3BhB,EAAKiB,MAAQ,CAACC,KAAM,IAAIG,KAAQT,WAAY,GAF5BZ,mFAKC,IAAAsB,EAAAnB,KACjBoB,YAAY,kBAAID,EAAKX,SAAS,CAACO,KAAM,IAAIG,QAAU,sCAyBnD,IACIG,EAAMrB,KAAKc,MAAMC,KACjBF,EAAOQ,EAAIL,WACZH,EAAM,KACPA,GAAc,IAGhB,IAAIS,EAAetB,KAAKc,MAAML,YAAeI,GAAQ,IAAI,IAAW,IAAI,IAAKQ,EAAIE,aAC7EX,EAAUZ,KAAKY,UACnB,OACEY,EAAAC,EAAAC,cAAA,OAAKC,UAAWC,IAAW,YAAa,CAACC,MAASjB,EAASkB,KAAQlB,KACjEY,EAAAC,EAAAC,cAAA,OAAKC,UAAU,cACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,iBAAiB3B,KAAKc,MAAMC,KAAKgB,sBAChDP,EAAAC,EAAAC,cAAA,OAAKC,UAAU,kBACfH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,kBAEfH,EAAAC,EAAAC,cAAA,OAAKC,UAAWC,IAAW,CAACI,KAAQpB,EAASqB,KAAQrB,IAAWsB,MAAO,CAACC,KAAI,GAAAC,OAAKd,EAAL,OAC1EE,EAAAC,EAAAC,cAAA,OAAKC,UAAU,YACfH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,YACfH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aAGjBH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,YAtBL,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,IAsBGU,IAAI,SAAAxB,GAAI,OAAGW,EAAAC,EAAAC,cAAA,QAAMC,UAAU,QAAQd,OAK1EW,EAAAC,EAAAC,cAAA,OAAKC,UAAU,gBACfH,EAAAC,EAAAC,cAAA,SAAOY,KAAK,QAAQX,UAAU,QAAQY,SAAUvC,KAAKI,SAAUoC,KAAO,IAAI,IAAM7B,MAAOW,EAAcmB,IAAK,EAAGC,IAAK,MAChHlB,EAAAC,EAAAC,cAAA,QAAMC,UAAU,SAAhB,cAAmCH,EAAAC,EAAAC,cAAA,uCAAnC,IAA8DF,EAAAC,EAAAC,cAAA,QAAMC,UAAU,mBAAhB,eA9DtDgB,cCQEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO1B,EAAAC,EAAAC,cAACyB,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.05e9f93b.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport classnames from \"classnames\";\nimport './App.scss';\n\nclass App extends Component {\n  \n  constructor(props){\n    super(props);\n    this.state = {time: new Date(), rangeValue: 0};\n  }\n\n  componentDidMount(){\n    setInterval(()=>this.setState({time: new Date()}), 1000);\n  }\n\n  setRange = (e) =>{\n    console.log(e)\n    this.setState({rangeValue: e.target.value});\n  }\n\n  isNight = () =>{\n    let hour = this.state.time.getHours();\n    \n    if(this.state.rangeValue){\n      let isAm = hour >=0 && hour < 12;\n      console.log(isAm, this.state.rangeValue)\n      if(isAm && this.state.rangeValue <=50){\n        return true;\n      }else if(!isAm && (this.state.rangeValue >=50)){\n        return true;\n      }\n      return false;\n    }\n    return (hour < 6 || hour > 18);\n  }\n\n  render() {\n    let divisions = [0,1,2,3,4,5,6,7,8,9,10,11];\n    let now = this.state.time;\n    let hour = now.getHours() \n    if(hour> 12){\n      hour = hour - 12;\n    }\n    \n    let leftPosition = this.state.rangeValue || (hour * (100/12)) + (  (100/720)*now.getMinutes());\n    let isNight = this.isNight();\n    return (\n      <div className={classnames(\"container\", {\"night\": isNight, \"day\": !isNight})}>\n        <div className=\"background\">\n          <div className=\"cloud cloud-1\">{this.state.time.toLocaleTimeString()}</div>\n          <div className=\"cloud cloud-2\"></div>\n          <div className=\"cloud cloud-3\"></div>\n          \n          <div className={classnames({\"moon\": isNight, \"sun\": !isNight})} style={{left: `${leftPosition}%`}}>\n            <div className=\"crater1\"></div>\n            <div className=\"crater2\"></div>\n            <div className=\"crater3\"></div>\n          </div>\n          \n          <div className=\"timeline\">{divisions.map(hour=> <span className=\"hour\">{hour}</span>)}</div>\n          {/* <div className=\"star star1-animation\"></div>\n          <div className=\"star star2-animation\"></div>\n          <div className=\"star star3-animation\"></div> */}\n        </div>\n        <div className=\"main-content\">\n        <input type=\"range\" className=\"range\" onChange={this.setRange} step={(100/720)} value={leftPosition} min={0} max={100}/>\n          <span className=\"intro\">Hi hi, I'm <span>Velbharathi❤️</span>.<span className=\"blinking-cursor\">_</span></span>\n          </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}